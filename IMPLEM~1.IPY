{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Importing Required Libraries"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.feature_extraction.text import TfidfVectorizer\n",
    "from sklearn.feature_extraction.text import HashingVectorizer\n",
    "import os\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn import metrics\n",
    "import matplotlib.pyplot as plt\n",
    "import urllib.parse"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Preprocessing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Bad samples: 44532\n",
      "Good samples: 1265974\n"
     ]
    }
   ],
   "source": [
    "with open('badqueries.txt','r', encoding=\"utf8\") as f:\n",
    "    data = f.readlines()\n",
    "data = list(set(data))\n",
    "bad_query_result = []\n",
    "\n",
    "#converting url encoded data to simple string\n",
    "for d in data:\n",
    "    d = str(urllib.parse.unquote(d))   \n",
    "    bad_query_result.append(d)\n",
    "\n",
    "with open('goodqueries.txt','r', encoding=\"utf8\") as f:\n",
    "    data = f.readlines()\n",
    "data = list(set(data))\n",
    "good_query_result = []\n",
    "\n",
    "#converting url encoded data to simple string\n",
    "for d in data:\n",
    "    d = str(urllib.parse.unquote(d))   \n",
    "    good_query_result.append(d)\n",
    "\n",
    "badQueries = bad_query_result\n",
    "validQueries = good_query_result\n",
    "\n",
    "badQueries = list(set(badQueries))\n",
    "validQueries = list(set(validQueries))\n",
    "allQueries = badQueries + validQueries\n",
    "\n",
    "#labels, 1 for malicious and 0 for clean\n",
    "yBad = [1 for i in range(0, len(badQueries))] \n",
    "yGood = [0 for i in range(0, len(validQueries))]\n",
    "y = yBad + yGood\n",
    "queries = allQueries\n",
    "\n",
    "badCount = len(badQueries)\n",
    "print(\"Bad samples: %d\" % badCount)\n",
    "validCount = len(validQueries)\n",
    "print(\"Good samples: %d\" % validCount)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Implementation of Logistic Regression using TF-DF Vectorization and Hashing Vectorization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "D:\\DataScience\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:763: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Classification Report for Logistic Regression with TFID Vectorization : \n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       1.00      1.00      1.00    253316\n",
      "           1       0.98      1.00      0.99      8786\n",
      "\n",
      "    accuracy                           1.00    262102\n",
      "   macro avg       0.99      1.00      0.99    262102\n",
      "weighted avg       1.00      1.00      1.00    262102\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "D:\\DataScience\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:763: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Classification Report for Logistic Regression with Hashing Vectorization : \n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       1.00      0.99      1.00    253316\n",
      "           1       0.81      0.96      0.88      8786\n",
      "\n",
      "    accuracy                           0.99    262102\n",
      "   macro avg       0.90      0.98      0.94    262102\n",
      "weighted avg       0.99      0.99      0.99    262102\n",
      "\n"
     ]
    }
   ],
   "source": [
    "#converting data to vectors using TFID\n",
    "vectorizer = TfidfVectorizer(min_df = 0.0, analyzer=\"char\", sublinear_tf=True, ngram_range=(1,3)) \n",
    "X = vectorizer.fit_transform(queries)\n",
    "\n",
    "#####################################################################################################################\n",
    "\n",
    "#splitting data\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
    "\n",
    "#Model Building using Logistic Regression\n",
    "lgs = LogisticRegression(class_weight={1: 2 * validCount / badCount, 0: 1.0})   # class_weight='balanced'\n",
    "lgs.fit(X_train, y_train)   #training our model\n",
    "predicted = lgs.predict(X_test)\n",
    "\n",
    "#ROC_AUC_Curve\n",
    "fpr, tpr, _ = metrics.roc_curve(y_test, (lgs.predict_proba(X_test)[:, 1]))\n",
    "auc = metrics.auc(fpr, tpr)\n",
    "plt.plot(fpr, tpr, linestyle='--')\n",
    "plt.xlabel('False Positive Rate')\n",
    "plt.ylabel('True Positive Rate')\n",
    "plt.title(\"Implementation of Logistic Regression with TFID Vectorization\")\n",
    "plt.show()\n",
    "\n",
    "\n",
    "from sklearn.metrics import classification_report\n",
    "print('\\nClassification Report for Logistic Regression with TFID Vectorization : \\n',classification_report(y_test, predicted))\n",
    "\n",
    "#######################################################################################################################\n",
    "\n",
    "#converting data to vectors using Hashing Vectorization\n",
    "vectorizer = HashingVectorizer() \n",
    "X = vectorizer.fit_transform(queries)\n",
    "\n",
    "#splitting data\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
    "\n",
    "#Model Building using Logistic Regression\n",
    "lgs = LogisticRegression(class_weight={1: 2 * validCount / badCount, 0: 1.0})   # class_weight='balanced'\n",
    "lgs.fit(X_train, y_train)   #training our model\n",
    "predicted = lgs.predict(X_test)\n",
    "\n",
    "#ROC_AUC_Curve\n",
    "fpr, tpr, _ = metrics.roc_curve(y_test, (lgs.predict_proba(X_test)[:, 1]))\n",
    "auc = metrics.auc(fpr, tpr)\n",
    "plt.plot(fpr, tpr, linestyle='--')\n",
    "plt.xlabel('False Positive Rate')\n",
    "plt.ylabel('True Positive Rate')\n",
    "plt.title(\"Implementation of Logistic Regression with Hashing Vectorization\")\n",
    "plt.show()\n",
    "\n",
    "\n",
    "from sklearn.metrics import classification_report\n",
    "print('\\nClassification Report for Logistic Regression with Hashing Vectorization : \\n',classification_report(y_test, predicted))\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
